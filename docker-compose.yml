services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: cityhotel-postgres
    environment:
      POSTGRES_DB: CityHotelGarageDB
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 4512
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # init-db klasörü yoksa bu satırı comment edin
      # - ./init-db:/docker-entrypoint-initdb.d
    networks:
      - cityhotel-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d CityHotelGarageDB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # .NET API with JWT
  api:
    build:
      context: ..
      dockerfile: CityHotelGarageAPI/Dockerfile
    container_name: cityhotel-api
    environment:
      # ASP.NET Core ayarları
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5010
      
      # Database connection
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=CityHotelGarageDB;Username=postgres;Password=4512;Pooling=true;MinPoolSize=1;MaxPoolSize=20;CommandTimeout=60;
      
      # JWT Configuration
      - JWT__SecretKey=MyVerySecureSecretKeyThatIsAtLeast256BitsLongForHMACSHA256Algorithm2024!
      - JWT__Issuer=CityHotelGarageAPI
      - JWT__Audience=CityHotelGarageClients
      - JWT__ExpiryMinutes=60
      
      # CORS ayarları
      - CORS__AllowedOrigins=http://localhost:3000,http://localhost:3001,https://yourdomain.com
      
      # Logging
      - Logging__LogLevel__Default=Information
      - Logging__LogLevel__Microsoft.AspNetCore=Warning
      - Logging__LogLevel__Microsoft.EntityFrameworkCore=Warning
      
      # Performance
      - DOTNET_GCServer=1
      - DOTNET_GCConcurrent=1
      - DOTNET_GCRetainVM=1
    
    ports:
      - "5010:5010"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cityhotel-network
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data  # Data persistence için
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Redis Cache (JWT blacklist ve caching için)
  redis:
    image: redis:7-alpine
    container_name: cityhotel-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cityhotel-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    command: redis-server --save 20 1 --loglevel warning

  # Nginx Reverse Proxy - SADECE VOLUME SORUNU ÇÖZÜLMÜş
  # Nginx'i şimdilik comment edelim, sonra ekleriz
  # nginx:
  #   image: nginx:alpine
  #   container_name: cityhotel-nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     # nginx.conf dosyası oluşturulduktan sonra bu satırları açın
  #     # - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     # - ./nginx/ssl:/etc/nginx/ssl:ro
  #     - ./logs/nginx:/var/log/nginx
  #   depends_on:
  #     - api
  #   networks:
  #     - cityhotel-network
  #   restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  cityhotel-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16